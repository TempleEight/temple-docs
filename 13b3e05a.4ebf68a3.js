(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{137:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(1),a=n(11),i=(n(0),n(176)),o={id:"foreign-keys",title:"Foreign Keys & Inter-Service Communication",sidebar_label:"Foreign Keys & Inter-Service Communication"},c={id:"guide/foreign-keys",title:"Foreign Keys & Inter-Service Communication",description:"This guide will look at adding foreign keys to services.",source:"@site/docs/guide/foreign-keys.md",permalink:"/temple-docs/docs/guide/foreign-keys",editUrl:"https://github.com/TempleEight/temple-docs/edit/master/TempleEight/docs/guide/foreign-keys.md",sidebar_label:"Foreign Keys & Inter-Service Communication",sidebar:"docsSidebar",previous:{title:"Enumeration",permalink:"/temple-docs/docs/guide/enumeration"},next:{title:"Business Logic & Hooks",permalink:"/temple-docs/docs/guide/hooks"}},s=[{value:"Foreign Keys",id:"foreign-keys",children:[]},{value:"Inter-Service Communication",id:"inter-service-communication",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This guide will look at adding foreign keys to services.\nWe'll use the ",Object(i.b)("inlineCode",{parentName:"p"},"ExampleService")," from the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/temple-docs/docs/getting-started"}),"Getting Started")," guide as a starting point."),Object(i.b)("h2",{id:"foreign-keys"},"Foreign Keys"),Object(i.b)("p",null,"In the context of a Templefile, a foreign key is a service attribute that links that service to another service.\nFor example, let us add another service alongside our example service, and add a foreign key."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-templefile"}),"ExampleService: service {\n  foo: string;\n  bar: int;\n  another: AnotherExampleService;\n}\n\nAnotherExampleService: service {\n  baz: bool;\n}\n")),Object(i.b)("p",null,"Here, the ",Object(i.b)("inlineCode",{parentName:"p"},"another")," attribute of the ",Object(i.b)("inlineCode",{parentName:"p"},"ExampleService")," service is our foreign key, allowing us to store a reference to an object in the ",Object(i.b)("inlineCode",{parentName:"p"},"AnotherExampleService")," service.\nThis means that to create an ",Object(i.b)("inlineCode",{parentName:"p"},"ExampleService")," object, we will need to pass in a UUID belonging to a ",Object(i.b)("inlineCode",{parentName:"p"},"AnotherExampleService")," object. Let's have a look."),Object(i.b)("p",null,"First let's try passing a random UUID to the ",Object(i.b)("inlineCode",{parentName:"p"},"another")," field:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),'# Try to create an ExampleService object with a non-existent AnotherExampleService object reference\n\u276f\u276f\u276f curl -X POST $KONG_ENTRY/api/example-service -d \'{"foo": "abcd", "bar": 8, "another": "43cc65f5-823c-11ea-9dc4-0242ac180003"}\'\n{"error":"Unknown AnotherExampleService: 43cc65f5-823c-11ea-9dc4-0242ac180003"}\n')),Object(i.b)("p",null,"Since an ",Object(i.b)("inlineCode",{parentName:"p"},"AnotherExampleService")," object does not exist with this UUID, the request returns an error.\nThis time let's try create an ",Object(i.b)("inlineCode",{parentName:"p"},"AnotherExampleService")," object first, and use the returned UUID to pass into the ",Object(i.b)("inlineCode",{parentName:"p"},"another")," field:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),'# Create an AnotherExampleService object\n\u276f\u276f\u276f curl -X POST $KONG_ENTRY/api/another-example-service -d \'{"baz": true}\'\n{"id":"842e9cb6-87d3-11ea-b556-0242ac120002","baz":true}\n\n# Create an ExampleService object with the created AnotherExampleService object UUID\n\u276f\u276f\u276f curl -X POST $KONG_ENTRY/api/example-service -d \'{"foo": "abcd", "bar": 8, "another": "842e9cb6-87d3-11ea-b556-0242ac120002"}\'\n{"id":"b12af831-87d3-11ea-b53f-0242ac130002","foo":"abcd","bar":8,"another":"842e9cb6-87d3-11ea-b556-0242ac120002"}\n')),Object(i.b)("p",null,"What a surprise, this time it works! But what's driving this under the hood?"),Object(i.b)("h2",{id:"inter-service-communication"},"Inter-Service Communication"),Object(i.b)("p",null,"As discussed in the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/temple-docs/docs/arch/service"}),"Service Architecture")," section, adding a foreign key like we have above to a service causes the ",Object(i.b)("inlineCode",{parentName:"p"},"comm")," package to be generated.\nThis includes an interface for making requests to other services.\nSo when the ",Object(i.b)("inlineCode",{parentName:"p"},"ExampleService")," gets a request, it takes the UUID passed in for the ",Object(i.b)("inlineCode",{parentName:"p"},"another")," field and makes a GET request to the ",Object(i.b)("inlineCode",{parentName:"p"},"AnotherExampleService")," to check it exists."),Object(i.b)("p",null,"At the moment this is the extent of the generated inter-service communication we support, however there's nothing stopping you from making calls to other services from your hooks.\nCheck out the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/temple-docs/docs/guide/hooks"}),"Business Logic & Hooks")," guide for more details."))}p.isMDXComponent=!0},176:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=r,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||i;return n?a.a.createElement(m,c({ref:t},l,{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);