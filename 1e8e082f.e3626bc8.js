(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{105:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(1),o=(n(0),n(136)),r=n(138);const i={id:"open-api",title:"OpenAPI Generation",sidebar_label:"OpenAPI Generation"},c={id:"guide/open-api",title:"OpenAPI Generation",description:"import useBaseUrl from '@docusaurus/useBaseUrl';",source:"@site/docs/guide/open-api.mdx",permalink:"/temple-docs/docs/guide/open-api",editUrl:"https://github.com/TempleEight/temple-docs/edit/master/TempleEight/docs/guide/open-api.mdx",sidebar_label:"OpenAPI Generation",sidebar:"docsSidebar",previous:{title:"Omitting Endpoints",permalink:"/temple-docs/docs/guide/omitting-endpoints"},next:{title:"Orchestration",permalink:"/temple-docs/docs/guide/orchestration"}},l=[{value:"Generating the Client Library",id:"generating-the-client-library",children:[]},{value:"Setting up an Xcode Project",id:"setting-up-an-xcode-project",children:[]},{value:"Starting the server for local development",id:"starting-the-server-for-local-development",children:[]},{value:"Using the Client API",id:"using-the-client-api",children:[]},{value:"Allowing a <code>localhost</code> Connection",id:"allowing-a-localhost-connection",children:[]},{value:"Building the Project",id:"building-the-project",children:[]}],p={rightToc:l};function s({components:e,...t}){return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"An OpenAPI specification describes an API in a standardised format, including:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"available endpoints"),Object(o.b)("li",{parentName:"ul"},"request and response contents"),Object(o.b)("li",{parentName:"ul"},"authentication required for the API")),Object(o.b)("p",null,"OpenAPI is very well documented, so although we'll be walking you through one specific example in this guide, you'll find lots more on the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://swagger.io/docs/specification/about/"}),"OpenAPI documentation pages"),"."),Object(o.b)("p",null,"For this example, we'll be showing you how to make requests to the ",Object(o.b)("inlineCode",{parentName:"p"},"ExampleService")," project we defined in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../getting-started"}),"Getting Started")," guide, from an iOS application."),Object(o.b)("p",null,"We'll assume you have some prerequisites installed:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://apps.apple.com/us/app/xcode/id497799835?mt=12"}),"Xcode")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://openapi-generator.tech/docs/installation"}),"OpenAPI generator")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://cocoapods.org"}),"CocoaPods"))),Object(o.b)("p",null,"We'll also assume you have some understanding of Swift, although it's syntax is very straightforward, so shouldn't pose too much of a challenge.\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html"}),"A Swift Tour")," can be found on the official Swift website."),Object(o.b)("h2",{id:"generating-the-client-library"},"Generating the Client Library"),Object(o.b)("p",null,"The project we generated as part of the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../getting-started"}),"Getting Started")," contains an ",Object(o.b)("inlineCode",{parentName:"p"},"api")," folder, which contains a single ",Object(o.b)("inlineCode",{parentName:"p"},"YAML")," file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"api\n\u2514\u2500\u2500 example-project.openapi.yaml\n")),Object(o.b)("p",null,"This file is the OpenAPI description of the generated server, detailing all of the available endpoints, as well as their associated request and response bodies."),Object(o.b)("p",null,"We can generate a Swift client for this description using the following command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"\u276f\u276f\u276f openapi-generator generate -i api/example-project.openapi.yaml -g swift4 -o ~/Desktop/example-openapi\n\n")),Object(o.b)("p",null,"This generates a new folder on the desktop with the OpenAPI client inside."),Object(o.b)("h2",{id:"setting-up-an-xcode-project"},"Setting up an Xcode Project"),Object(o.b)("p",null,"Next we'll setup a fresh Xcode project that uses this library."),Object(o.b)("p",null,"First, open Xcode, and from the menu bar select File > New > Project:"),Object(o.b)("p",{align:"center"},Object(o.b)("img",{alt:"Create a new Xcode project",src:Object(r.a)("img/xcode-new-project.png"),width:"50%"})),Object(o.b)("p",null,"Then select Single View App:"),Object(o.b)("img",{alt:"Create a new iOS App",src:Object(r.a)("img/xcode-new-ios.png")}),Object(o.b)("p",null,"Fill in your project details as necessary, making sure to choose ",Object(o.b)("strong",{parentName:"p"},"Storyboard")," for the User Interface, and then save the project:"),Object(o.b)("img",{alt:"Create a new iOS App",src:Object(r.a)("img/xcode-new-ios-detail.png")}),Object(o.b)("p",null,"Now - close the Xcode window that just appeared and reopen your terminal.\nMove to your Xcode project directory and enter the following command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Move to your Xcode project directory\n\u276f\u276f\u276f cd ~/Desktop/ExampleClient\n\n# Create a new Cocoapod project\n\u276f\u276f\u276f pod init\n")),Object(o.b)("p",null,"This will have created a ",Object(o.b)("inlineCode",{parentName:"p"},"Podfile")," similar to the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'ExampleClient' do\n  # Comment the next line if you don't want to use dynamic frameworks\n  Teuse_frameworks!\n\n  # Pods for ExampleClient\n\nend\n")),Object(o.b)("p",null,"We're going to add 2 dependencies to our Podfile: one for ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Alamofire/Alamofire"}),"Alamofire"),", a HTTP library, and another to our generated client library.\nThe path to the generated client library must match the ",Object(o.b)("inlineCode",{parentName:"p"},"-o")," argument to ",Object(o.b)("inlineCode",{parentName:"p"},"openapi-generator")," from the previous step."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'ExampleClient' do\n  # Comment the next line if you don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for ExampleClient\n  pod 'Alamofire', '~> 4.9.0'\n  pod 'OpenAPIClient', :path => '~/Desktop/example-openapi'\n\nend\n")),Object(o.b)("p",null,"Following this, install the dependencies with:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Install the Pod dependencies \n\u276f\u276f\u276f pod install\n")),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This will instruct you to use the ",Object(o.b)("inlineCode",{parentName:"p"},".xcworkspace")," generated in this directory from now on, instead of the normal Xcode project."))),Object(o.b)("img",{alt:"Xcode workspace",src:Object(r.a)("img/xcode-workspace.png")}),Object(o.b)("p",null,"All of the code will be written in the ",Object(o.b)("inlineCode",{parentName:"p"},"ViewController.swift")," class from now on, but if you're a Swift expert, feel free to create your own."),Object(o.b)("h2",{id:"starting-the-server-for-local-development"},"Starting the server for local development"),Object(o.b)("p",null,"Before we get started writing our client, we need to deploy the Temple project for local development.\nThis can be done by following the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../getting-started"}),"Getting Started")," guide, or from the root of the generated Temple project folder, by running the following commands:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Deploy the services for local development\n\u276f\u276f\u276f source deploy.sh\n\n# Find the base URL to make requests to\n\u276f\u276f\u276f echo $KONG_ENTRY\nlocalhost:8000\n")),Object(o.b)("p",null,"This second step gave us the base URL where requests to our API can be made."),Object(o.b)("h2",{id:"using-the-client-api"},"Using the Client API"),Object(o.b)("p",null,"Now, back in the Xcode project, we can tell the client where to make requests by settings the ",Object(o.b)("inlineCode",{parentName:"p"},"basePath")," property of the client, like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift",metastring:"{2,7}","{2,7}":!0}),'import UIKit\nimport OpenAPIClient\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        OpenAPIClientAPI.basePath = "http://localhost:8000/api"\n    }\n}\n')),Object(o.b)("p",null,"Now we can make a sample call to the ",Object(o.b)("inlineCode",{parentName:"p"},"ExampleService"),", as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift",metastring:"{8-13}","{8-13}":!0}),'import UIKit\nimport OpenAPIClient\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        OpenAPIClientAPI.basePath = "http://localhost:8000/api"\n        ExampleServiceAPI.exampleServicePost(inlineObject: InlineObject(foo: "hello", bar: 123)) { (response, error) in\n            guard let response = response else {\n                fatalError(error.debugDescription)\n            }\n            print(response)\n        }\n    }\n}\n\n')),Object(o.b)("p",null,"Here we make a ",Object(o.b)("inlineCode",{parentName:"p"},"POST")," request, passing the parameters ",Object(o.b)("inlineCode",{parentName:"p"},'"hello"')," and ",Object(o.b)("inlineCode",{parentName:"p"},"123")," for ",Object(o.b)("inlineCode",{parentName:"p"},"foo")," and ",Object(o.b)("inlineCode",{parentName:"p"},"bar")," respectively.\nWe then also include a callback, which checks that the response exists otherwise causes a ",Object(o.b)("inlineCode",{parentName:"p"},"fatalError"),".\nIf it does exist, we output it to the console."),Object(o.b)("h2",{id:"allowing-a-localhost-connection"},"Allowing a ",Object(o.b)("inlineCode",{parentName:"h2"},"localhost")," Connection"),Object(o.b)("p",null,"Since iOS only allows to make requests from URLs which are secure, we have to make a slight modification to the project in order to make a ",Object(o.b)("inlineCode",{parentName:"p"},"localhost")," service accessible."),Object(o.b)("p",null,"From the project overview on the left of the Xcode window, open ",Object(o.b)("inlineCode",{parentName:"p"},"Info.plist"),' and add the key "App Transport Security Settings", which should then contain the key "Allow Arbitrary Loads", set to "YES".\nYour final ',Object(o.b)("inlineCode",{parentName:"p"},"Info.plist")," should resemble:"),Object(o.b)("p",{align:"center"},Object(o.b)("img",{alt:"Update the info.plist",src:Object(r.a)("img/xcode-transport.png"),width:"50%"})),Object(o.b)("h2",{id:"building-the-project"},"Building the Project"),Object(o.b)("p",null,"We can now go ahead and build the Xcode project, by going to the Menu Bar: Product > Run"),Object(o.b)("img",{alt:"Update the info.plist",src:Object(r.a)("img/xcode-run.png")}),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"When building the Xcode project you might find an error that resembles:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"Protocol type 'Any' cannot conform to 'Decodable' because only concrete types can conform to protocols\n")),Object(o.b)("p",{parentName:"div"},"This is an issue with the OpenAPI generator for Swift.\nA simple workaround is to find the offending line, by double clicking the error message, and replace occurences of the type ",Object(o.b)("inlineCode",{parentName:"p"},"Any")," in that function with ",Object(o.b)("inlineCode",{parentName:"p"},"[String: String]"),", including the function return type."))),Object(o.b)("p",null,"After the simulator eventually boots, you should see an output in the Xcode console which resembles a successful response:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'InlineResponse200(id: Optional(7363A1A9-8420-11EA-B33F-0242C0A83003), foo: Optional("hello"), bar: Optional(123.0))\n')))}s.isMDXComponent=!0},136:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),u=a,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||r;return n?o.a.createElement(m,c({ref:t},p,{components:n})):o.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},137:function(e,t,n){"use strict";var a=n(0),o=n(34);t.a=function(){return Object(a.useContext)(o.a)}},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(137);function o(e){const{siteConfig:t}=Object(a.a)(),{baseUrl:n="/"}=t||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?n+e.slice(1):n+e}}}]);