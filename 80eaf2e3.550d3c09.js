(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(1),a=(n(0),n(176));const i={id:"structs",title:"Structs",sidebar_label:"Structs"},o={id:"guide/structs",title:"Structs",description:"Rather than using a separate service for each type of entity in your system, sometimes it makes sense to store multiple types of entity on the same database.",source:"@site/docs/guide/structs.md",permalink:"/temple-docs/docs/guide/structs",editUrl:"https://github.com/TempleEight/temple-docs/edit/master/TempleEight/docs/guide/structs.md",sidebar_label:"Structs",sidebar:"docsSidebar",previous:{title:"Regeneration",permalink:"/temple-docs/docs/guide/regeneration"},next:{title:"Temple Test",permalink:"/temple-docs/docs/guide/temple-test"}},c=[{value:"Many-to-many relationships",id:"many-to-many-relationships",children:[]},{value:"Endpoint URLs",id:"endpoint-urls",children:[]}],l={rightToc:c};function s({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Rather than using a separate service for each type of entity in your system, sometimes it makes sense to store multiple types of entity on the same database.\nThis is useful for implementing many-to-one relationships, providing a parallel to arrays.\nTemple provides this functionality in the form of ",Object(a.b)("strong",{parentName:"p"},"structs"),".\nA struct block is expressed in the Templefile as a block within another service."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-templefile",metastring:"{11-14}","{11-14}":!0}),"Example: project {\n  #provider(kube);\n  #authMethod(email);\n}\n\nHome: service {\n  address: string;\n  occupants: int(min: 0, precision: 1);\n  #auth;\n\n  Room: struct {\n    name: string;\n    #enumerable;\n  };\n}\n")),Object(a.b)("p",null,"Every struct entry has an implicit reference to an entity in the parent service.\nIn the example above, every room is part of a single home."),Object(a.b)("p",null,"Structs may include metadata for specifying which endpoints are generated: ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"enumeration"}),Object(a.b)("inlineCode",{parentName:"a"},"#enumerable"))," and ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"omitting-endpoints"}),Object(a.b)("inlineCode",{parentName:"a"},"#omit[...]")),".\nThey may not include ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"access-control"}),"access control")," metadata (",Object(a.b)("inlineCode",{parentName:"p"},"#readable"),"/",Object(a.b)("inlineCode",{parentName:"p"},"#writable"),"): this is all inherited from the parent.\nThis means that, if a service is only writable by the creator, only the creator of the service entry may create a struct tied to this service entity.\nThe struct entry is likewise only readable (through the list/read endpoints) if the parent is readable."),Object(a.b)("h2",{id:"many-to-many-relationships"},"Many-to-many relationships"),Object(a.b)("p",null,"To make a many-to-many relationship, use a struct as a linking table.\nBelow are two examples of this.\nNote that in the second example, ",Object(a.b)("inlineCode",{parentName:"p"},"Follower")," does not include a reference to the tweeter doing the following, as that is implicit: only the reference to the tweeter being followed is included."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-templefile",metastring:"{7}","{7}":!0}),"ExampleNews: project {}\n\nSubscriber: service {\n  username: string @unique;\n\n  Subscription: struct {\n    topic: Topic;\n    #enumerable;\n  };\n}\n\nTopic: service {\n  title: string @unique;\n}\n")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-templefile",metastring:"{7}","{7}":!0}),"ExampleNetwork: project {}\n\nTweeter: service {\n  username: string @unique;\n\n  Follower: struct {\n    otherTweeter: Tweeter;\n    #enumerable;\n  };\n}\n")),Object(a.b)("h2",{id:"endpoint-urls"},"Endpoint URLs"),Object(a.b)("p",null,"To emphasize that every struct is tied to a specific instance of the service, the ID of the parent is included in the URL of the entry."),Object(a.b)("p",null,"Using the example above, the endpoints generated are as follows:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Create: ",Object(a.b)("inlineCode",{parentName:"li"},"POST /api/home/{parent-id}/room")),Object(a.b)("li",{parentName:"ul"},"Read: ",Object(a.b)("inlineCode",{parentName:"li"},"GET /api/home/{parent-id}/room/{id}")),Object(a.b)("li",{parentName:"ul"},"Update: ",Object(a.b)("inlineCode",{parentName:"li"},"PUT /api/home/{parent-id}/room/{id}")),Object(a.b)("li",{parentName:"ul"},"Delete: ",Object(a.b)("inlineCode",{parentName:"li"},"DELETE /api/home/{parent-id}/room/{id}")),Object(a.b)("li",{parentName:"ul"},"List: ",Object(a.b)("inlineCode",{parentName:"li"},"GET /api/home/{parent-id}/room/{id}/all"))),Object(a.b)("p",null,"For example, if we have a home with ID ",Object(a.b)("inlineCode",{parentName:"p"},"82abd10c-8b90-11ea-bc55-0242ac130003"),", we can create a room with a POST to ",Object(a.b)("inlineCode",{parentName:"p"},"/api/home/82abd10c-8b90-11ea-bc55-0242ac130003/room"),".\nIf this returns a room with ID ",Object(a.b)("inlineCode",{parentName:"p"},"019103d4-8b96-11ea-bc55-0242ac130003"),", we can read it with a GET to ",Object(a.b)("inlineCode",{parentName:"p"},"/api/home/82abd10c-8b90-11ea-bc55-0242ac130003/room/019103d4-8b96-11ea-bc55-0242ac130003"),"."))}s.isMDXComponent=!0},176:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},m=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,d=m["".concat(o,".").concat(u)]||m[u]||b[u]||i;return n?a.a.createElement(d,c({ref:t},s,{components:n})):a.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);