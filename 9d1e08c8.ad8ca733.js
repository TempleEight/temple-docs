(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{156:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var i=n(1),r=n(11),a=(n(0),n(176)),l={id:"templefile-primitives",title:"Templefile Primitives",sidebar_label:"Templefile Primitives"},o={id:"reference/templefile-primitives",title:"Templefile Primitives",description:"Templefiles support 8 primitive types, roughly aligned with those found in `SQL` style languages. Any attribute of a service can be of any of these types.",source:"@site/docs/reference/templefile-primitives.md",permalink:"/temple-docs/docs/reference/templefile-primitives",editUrl:"https://github.com/TempleEight/temple-docs/edit/master/TempleEight/docs/reference/templefile-primitives.md",sidebar_label:"Templefile Primitives",sidebar:"docsSidebar",previous:{title:"Templefile Specification",permalink:"/temple-docs/docs/reference/templefile-spec"},next:{title:"Airbnb",permalink:"/temple-docs/docs/reference/example-templefiles/airbnb"}},c=[{value:"Parameters",id:"parameters",children:[]},{value:"Primitives",id:"primitives",children:[{value:"<code>bool</code>",id:"bool",children:[]},{value:"<code>string(maxLength: int, minLength: int)</code>",id:"stringmaxlength-int-minlength-int",children:[]},{value:"<code>int(max: int, min: int, precision: int = 4)</code>",id:"intmax-int-min-int-precision-int--4",children:[]},{value:"<code>float(max: float, min: float = 0.0, precision: int = 8)</code>",id:"floatmax-float-min-float--00-precision-int--8",children:[]},{value:"<code>date</code>",id:"date",children:[]},{value:"<code>time</code>",id:"time",children:[]},{value:"<code>datetime</code>",id:"datetime",children:[]},{value:"<code>data(maxSize: long)</code>",id:"datamaxsize-long",children:[]}]}],b={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Templefiles support 8 primitive types, roughly aligned with those found in ",Object(a.b)("inlineCode",{parentName:"p"},"SQL")," style languages. Any attribute of a service can be of any of these types."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-temple-type"}),"bool\nstring(maxLength: int, minLength: int)\nint(max: int, min: int, precision: int = 4)\nfloat(max: float, min: float, precision: int = 8)\ndate\ntime\ndatetime\ndata(maxSize: int)\n")),Object(a.b)("h2",{id:"parameters"},"Parameters"),Object(a.b)("p",null,"Many types include optional parameters, which will be enforced as either column constraints on the database table, or as checks in server-side code.\nAll parameters are optional."),Object(a.b)("h2",{id:"primitives"},"Primitives"),Object(a.b)("h3",{id:"bool"},Object(a.b)("inlineCode",{parentName:"h3"},"bool")),Object(a.b)("p",null,"Used for storing Boolean truthfulness."),Object(a.b)("p",null,"Possible values: ",Object(a.b)("inlineCode",{parentName:"p"},"true"),", ",Object(a.b)("inlineCode",{parentName:"p"},"false")),Object(a.b)("h3",{id:"stringmaxlength-int-minlength-int"},Object(a.b)("inlineCode",{parentName:"h3"},"string(maxLength: int, minLength: int)")),Object(a.b)("p",null,"Used for storing textual data, equivalent to the ",Object(a.b)("inlineCode",{parentName:"p"},"TEXT")," datatype in ",Object(a.b)("inlineCode",{parentName:"p"},"SQL"),"."),Object(a.b)("p",null,"For a fixed-length string, provide the same parameter twice, e.g. ",Object(a.b)("inlineCode",{parentName:"p"},"string(20, 20)"),".\nIf a single argument is given, this is the upper bound."),Object(a.b)("h4",{id:"string-parameters"},"String parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"maxLength: int"),": The maximum number of characters allowable in the string (inclusive)."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"minLength: int"),": The minimum number of characters allowable in the string (inclusive).")),Object(a.b)("h3",{id:"intmax-int-min-int-precision-int--4"},Object(a.b)("inlineCode",{parentName:"h3"},"int(max: int, min: int, precision: int = 4)")),Object(a.b)("p",null,"Used for storing signed integers."),Object(a.b)("h4",{id:"int-parameters"},"Int parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"max: int"),": The highest value allowed to be stored, inclusive."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"min: int"),": The lowest value allowed to be stored, inclusive."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"precision: int = 4"),": The precision argument is the number of bytes of precision to use.\nThis must be between 1 and 8.\nE.g. if precision is 4, there are at least 4 bytes = 32 bits used to store the number, so the numbers -2",Object(a.b)("sup",null,"31")," to 2",Object(a.b)("sup",null,"31"),"-1 will be storable.")),Object(a.b)("h3",{id:"floatmax-float-min-float--00-precision-int--8"},Object(a.b)("inlineCode",{parentName:"h3"},"float(max: float, min: float = 0.0, precision: int = 8)")),Object(a.b)("p",null,"Used for storing real numbers, in ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Single-precision_floating-point_format"}),"IEEE floating point format"),"."),Object(a.b)("h4",{id:"float-parameters"},"Float parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"max: float"),": The highest value allowed to be stored."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"min: float"),": The lowest value allowed to be stored."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"precision: int = 8"),": The minimum number of bytes used to store the floating point number.\nThis must be between 1 and 8, and may be rounded up by the implementation.")),Object(a.b)("h3",{id:"date"},Object(a.b)("inlineCode",{parentName:"h3"},"date")),Object(a.b)("p",null,"Used for representing calendar dates. Stored in ",Object(a.b)("inlineCode",{parentName:"p"},"YYYY-MM-DD")," format with values in possible range of ",Object(a.b)("inlineCode",{parentName:"p"},"0001-01-01")," through ",Object(a.b)("inlineCode",{parentName:"p"},"9999-12-31"),"."),Object(a.b)("h3",{id:"time"},Object(a.b)("inlineCode",{parentName:"h3"},"time")),Object(a.b)("p",null,"Used for representing times of day, but does not refer to one specific moment in time. Stored in ",Object(a.b)("inlineCode",{parentName:"p"},"HH:MM:SS.NNNNNN")," format with values in possible range of ",Object(a.b)("inlineCode",{parentName:"p"},"00:00:00.0000000")," through ",Object(a.b)("inlineCode",{parentName:"p"},"23:59:59.9999999"),"."),Object(a.b)("h3",{id:"datetime"},Object(a.b)("inlineCode",{parentName:"h3"},"datetime")),Object(a.b)("p",null,"Used for representing specific moments in time, with a particular timezone. Stored in UTC in ",Object(a.b)("inlineCode",{parentName:"p"},"'YYYY-MM-DD HH:MM:SS.NNNNNN'")," format."),Object(a.b)("h3",{id:"datamaxsize-long"},Object(a.b)("inlineCode",{parentName:"h3"},"data(maxSize: long)")),Object(a.b)("p",null,"Used for storing binary file objects."),Object(a.b)("h4",{id:"data-parameters"},"Data parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"maxSize: long"),": The maximum file size allowable in bytes.\nNote that numeric literals may use the suffixes ",Object(a.b)("inlineCode",{parentName:"li"},"k"),", ",Object(a.b)("inlineCode",{parentName:"li"},"M")," and ",Object(a.b)("inlineCode",{parentName:"li"},"G")," as multipliers, for one 10",Object(a.b)("sup",null,"3"),", 10",Object(a.b)("sup",null,"6")," and 10",Object(a.b)("sup",null,"9")," respectively.")))}p.isMDXComponent=!0},176:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},m=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,u=m["".concat(l,".").concat(d)]||m[d]||s[d]||a;return n?r.a.createElement(u,o({ref:t},b,{components:n})):r.a.createElement(u,o({ref:t},b))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var b=2;b<a;b++)l[b]=n[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);