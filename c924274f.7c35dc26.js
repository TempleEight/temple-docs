(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{158:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var i=n(1),r=(n(0),n(165)),a=n(168);const o={id:"service",title:"Service Architecture",sidebar_label:"Service Architecture"},c={id:"arch/service",title:"Service Architecture",description:"import useBaseUrl from '@docusaurus/useBaseUrl';",source:"@site/docs/arch/service.md",permalink:"/temple-docs/docs/arch/service",editUrl:"https://github.com/TempleEight/temple-docs/edit/master/TempleEight/docs/arch/service.md",sidebar_label:"Service Architecture",sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/temple-docs/docs/arch/system"},next:{title:"TempleFile Specification",permalink:"/temple-docs/docs/reference/templefile-spec"}},l=[{value:"Libraries",id:"libraries",children:[]},{value:"Service File Tree",id:"service-file-tree",children:[]},{value:"The <code>main</code> Package",id:"the-main-package",children:[{value:"The <code>env</code> Object",id:"the-env-object",children:[]},{value:"Handlers",id:"handlers",children:[]}]},{value:"The <code>dao</code> Package",id:"the-dao-package",children:[]},{value:"Inter-Service Communication",id:"inter-service-communication",children:[]},{value:"Metrics",id:"metrics",children:[]},{value:"FAQ",id:"faq",children:[{value:"Why didn&#39;t you use ORM (Object-Relation Mapping)?",id:"why-didnt-you-use-orm-object-relation-mapping",children:[]}]}],s={rightToc:l};function d({components:e,...t}){return Object(r.b)("wrapper",Object(i.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This section will describe the architecture of an individual service.\nWe'll use the ",Object(r.b)("inlineCode",{parentName:"p"},"ExampleService")," from the the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/getting-started"}),"Getting Started")," guide to illustrate the core service architecture.\nOnce covered, we'll look at how optional features such as inter-service communication and metrics slot in.\nFinally, there's an FAQ section to answer common questions about our architecture. "),Object(r.b)("h2",{id:"libraries"},"Libraries"),Object(r.b)("p",null,"Before we get started, here are the ",Object(r.b)("inlineCode",{parentName:"p"},"go")," libraries we're using:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/gorilla/mux"}),"gorilla/mux")," - for routing requests"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/lib/pq"}),"lib/pq")," - for interfacing with the backing datastore"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/go-playground/validator"}),"go-playground/validator")," - for validating request body parameters"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/google/uuid"}),"google/uuid")," - for handling all things UUID")),Object(r.b)("h2",{id:"service-file-tree"},"Service File Tree"),Object(r.b)("p",null,"As a reminder, here is the ",Object(r.b)("inlineCode",{parentName:"p"},"ExampleService")," block from the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/getting-started"}),"Getting Started")," guide:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"ExampleService: service {\n  foo: string;\n  bar: int;\n}\n")),Object(r.b)("p",null,"Here is the corresponding generated file tree:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 config.json\n\u251c\u2500\u2500 dao\n\u2502   \u251c\u2500\u2500 dao.go\n\u2502   \u251c\u2500\u2500 datastore.go\n\u2502   \u2514\u2500\u2500 errors.go\n\u251c\u2500\u2500 example-service.go\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 hook.go\n\u251c\u2500\u2500 setup.go\n\u2514\u2500\u2500 util\n    \u2514\u2500\u2500 util.go\n")),Object(r.b)("p",null,"We can ignore the ",Object(r.b)("inlineCode",{parentName:"p"},"Dockerfile"),", ",Object(r.b)("inlineCode",{parentName:"p"},"go.mod")," and ",Object(r.b)("inlineCode",{parentName:"p"},"config.json")," files for the purpose of illustrating the architecture.\nThis leaves us with files that fit into one of three packages:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"main")," - sets up the server environment and handles incoming requests and outgoing responses"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"dao")," - provides a common interface to the backing datastore, abstracting implementation details"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"util")," - houses miscellaneous utility functions")),Object(r.b)("h2",{id:"the-main-package"},"The ",Object(r.b)("inlineCode",{parentName:"h2"},"main")," Package"),Object(r.b)("p",null,"This package, as you would expect, does most of the heavy lifting. In our example, it includes the following files at the service root directory:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"\u251c\u2500\u2500 example-service.go\n\u251c\u2500\u2500 hook.go\n\u2514\u2500\u2500 setup.go\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"example-service.go")," contains the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function, the entrypoint to our service.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function's responsibility is to initialise the environment object and start the server."),Object(r.b)("h3",{id:"the-env-object"},"The ",Object(r.b)("inlineCode",{parentName:"h3"},"env")," Object"),Object(r.b)("p",null,"This environment object is fundamental to the architecture, encapsulating the server behaviour.\nIt stores the interface with the DAO, the defined hooks (see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/hooks"}),"Business Logic & Hooks"),"), and the validator for validating incoming request arguments.\nOptional features such as inter-service communication add interfaces to this object."),Object(r.b)("p",null,"Defined on the environment object are the handler functions, for handling requests to the endpoints.\nBefore starting the server, the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function calls the ",Object(r.b)("inlineCode",{parentName:"p"},"defaultRouter")," function to route incoming requests to their corresponding handler.\nThe resulting router is then passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"setup")," function in ",Object(r.b)("inlineCode",{parentName:"p"},"setup.go"),", as discussed in ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/adding-endpoints"}),"Adding Endpoints"),", and then the server is finally started."),Object(r.b)("h3",{id:"handlers"},"Handlers"),Object(r.b)("p",null,"For each route/endpoint a corresponding handler is defined in ",Object(r.b)("inlineCode",{parentName:"p"},"example-service.go"),".\nIn our example, four endpoints are defined, one for each CRUD (",Object(r.b)("inlineCode",{parentName:"p"},"Create"),", ",Object(r.b)("inlineCode",{parentName:"p"},"Read"),", ",Object(r.b)("inlineCode",{parentName:"p"},"Update"),", ",Object(r.b)("inlineCode",{parentName:"p"},"Delete"),") operation.\nIf enumeration is defined for the service, a ",Object(r.b)("inlineCode",{parentName:"p"},"List")," endpoint handler will be defined.\nIf authentication is defined for the service, an ",Object(r.b)("inlineCode",{parentName:"p"},"Identify")," endpoint handler will be defined.\nSee the guides for ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/enumeration"}),"Enumeration")," and ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/authentication"}),"Authentication")," respectively for instructions.\nFurthermore, as you would probably expect, omitted endpoints will not have routes or handlers defined, see the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/omitting-endpoints"}),"Omitting Endpoints")," guide for more details."),Object(r.b)("p",null,"When a request comes in, the router directs the request to the corresponding handler. A handler is responsible for a number of tasks:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Extracting the resource ID from the URL, if applicable (Read, Update, Delete operations)"),Object(r.b)("li",{parentName:"ul"},"Extracting the auth ID from the authorization header token, if applicable (project uses authorization)"),Object(r.b)("li",{parentName:"ul"},"Decoding and validating the incoming request body"),Object(r.b)("li",{parentName:"ul"},"Calling the inter-service communication functions to check foreign keys, if applicable (see ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"/temple-docs/docs/guide/foreign-keys"}),"Foreign Keys & Inter-Service Communication"),")"),Object(r.b)("li",{parentName:"ul"},"Checking authorization to perform the operation based on access control, if applicable (see ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"/temple-docs/docs/guide/access-control"}),"Access Control"),")"),Object(r.b)("li",{parentName:"ul"},"Calling the before operation hooks"),Object(r.b)("li",{parentName:"ul"},"Performing the DAO call to modify the datastore state"),Object(r.b)("li",{parentName:"ul"},"Calling the after operation hooks"),Object(r.b)("li",{parentName:"ul"},"Encoding the DAO response into JSON"),Object(r.b)("li",{parentName:"ul"},"Responding to the request")),Object(r.b)("p",null,"If any task fails, the handler responds to the request with a suitable status code and error message.\nTo visualise this entire process, the following diagram shows the flow of a create request in our example service:"),Object(r.b)("p",{align:"center"},Object(r.b)("img",{alt:"Create Handler Diagram",src:Object(a.a)("img/create-handler.png"),width:"50%"})),Object(r.b)("p",null,"Though note that hooks have the ability to respond to the request themselves, as discussed in ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/hooks"}),"Business Logic & Hooks"),"."),Object(r.b)("h2",{id:"the-dao-package"},"The ",Object(r.b)("inlineCode",{parentName:"h2"},"dao")," Package"),Object(r.b)("p",null,"The DAO is responsible for changing the state of the backing datastore, following the principles of the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Data_access_object"}),"Data Access Object")," pattern.\nIt abstracts the implementation details, namely by being responsible for initialising and maintaining the datastore connection, and provides an interface for package users.\nBy default a DAO interface function is defined for each corresponding operation handler, declared in the ",Object(r.b)("inlineCode",{parentName:"p"},"BaseDatastore")," interface in ",Object(r.b)("inlineCode",{parentName:"p"},"dao.go"),".\nHowever additional DAO functions can be added by modifying the ",Object(r.b)("inlineCode",{parentName:"p"},"datastore")," interface in ",Object(r.b)("inlineCode",{parentName:"p"},"datastore.go"),", see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/adding-dao-functions"}),"Adding DAO Functions")," for instructions."),Object(r.b)("h2",{id:"inter-service-communication"},"Inter-Service Communication"),Object(r.b)("p",null,"If the service includes foreign key attributes, additional files are generated to facilitate inter-service communication.\nFor example, let us add a foreign key to our example service:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"ExampleService: service {\n  foo: string;\n  bar: int;\n  another: AnotherExampleService;\n}\n\nAnotherExampleService: service {\n  baz: bool;\n}\n")),Object(r.b)("p",null,"Which will add the following to our service file tree:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"\u2514\u2500\u2500 comm\n    \u2514\u2500\u2500 handler.go\n")),Object(r.b)("p",null,"This, has you might have guessed, makes up the ",Object(r.b)("inlineCode",{parentName:"p"},"comm")," package, which provides an interface for making requests to other services.\nIt is only created if foreign keys are defined for the service, see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/foreign-keys"}),"Foreign Keys & Inter-Service Communication"),".\nThe functions generated take a UUID as an argument, make a request to the target service, and return a boolean to the function caller depending on if a resource for that UUID exists."),Object(r.b)("p",null,"In the future we anticipate providing a similar mechanism to that in the ",Object(r.b)("inlineCode",{parentName:"p"},"dao")," to allow you the user to extend the ",Object(r.b)("inlineCode",{parentName:"p"},"Comm")," interface found in ",Object(r.b)("inlineCode",{parentName:"p"},"handler.go"),". In the meantime these calls can be added to hooks."),Object(r.b)("h2",{id:"metrics"},"Metrics"),Object(r.b)("p",null,"If the project has metrics defined for it, additional files are generated to facilitate them.\nFor example, let us add metrics to our example service:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"ExampleProject: project {\n  #language(go);\n  #database(postgres);\n  #provider(dockerCompose);\n  #metrics(prometheus);\n}\n\nExampleService: service {\n  foo: string;\n  bar: int;\n  another: AnotherExampleService;\n}\n\nAnotherExampleService: service {\n  baz: bool;\n}\n")),Object(r.b)("p",null,"Which will add the following to our service file tree"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"\u2514\u2500\u2500 metric\n    \u2514\u2500\u2500 metric.go\n")),Object(r.b)("p",null,"Which predictably makes up the ",Object(r.b)("inlineCode",{parentName:"p"},"metric")," package.\nThis simply provides predefined metric variables ready for invoking metric calls in the handlers, see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/temple-docs/docs/guide/metrics"}),"Metrics")," for more details."),Object(r.b)("h2",{id:"faq"},"FAQ"),Object(r.b)("h3",{id:"why-didnt-you-use-orm-object-relation-mapping"},"Why didn't you use ORM (Object-Relation Mapping)?"),Object(r.b)("p",null,"We have a few reasons for this:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"They abstract most of the database code meaning it can be hard to implement certain queries"),Object(r.b)("li",{parentName:"ul"},"They can be a bottleneck, by building our own database layer we can keep it simple and make future extensions easier"),Object(r.b)("li",{parentName:"ul"},"Some languages don't have a good ORM solution"),Object(r.b)("li",{parentName:"ul"},"It's yet another dependency, one you the developer may not want")))}d.isMDXComponent=!0},165:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),d=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=d(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=d(n),u=i,h=b["".concat(o,".").concat(u)]||b[u]||p[u]||a;return n?r.a.createElement(h,c({ref:t},s,{components:n})):r.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},166:function(e,t,n){"use strict";var i=n(0),r=n(50);t.a=function(){return Object(i.useContext)(r.a)}},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(173);var i=n(166);function r(e){var t=(Object(i.a)().siteConfig||{}).baseUrl,n=void 0===t?"/":t;if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?n+e.slice(1):n+e}},170:function(e,t,n){var i=n(70),r=n(23);e.exports=function(e,t,n){if(i(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(r(e))}},171:function(e,t,n){var i=n(2)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[i]=!1,!"/./"[e](t)}catch(r){}}return!0}},173:function(e,t,n){"use strict";var i=n(17),r=n(35),a=n(170),o="".startsWith;i(i.P+i.F*n(171)("startsWith"),"String",{startsWith:function(e){var t=a(this,e,"startsWith"),n=r(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),i=String(e);return o?o.call(t,i,n):t.slice(n,n+i.length)===i}})}}]);