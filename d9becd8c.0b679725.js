(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{129:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(1),a=(n(0),n(136));const i={id:"value-constraints",title:"Value Constraints",sidebar_label:"Value Constraints"},o={id:"guide/value-constraints",title:"Value Constraints",description:"Sometimes you need more control over the values that are valid in your data model.",source:"@site/docs/guide/value-constraints.md",permalink:"/temple-docs/docs/guide/value-constraints",editUrl:"https://github.com/TempleEight/temple-docs/edit/master/TempleEight/docs/guide/value-constraints.md",sidebar_label:"Value Constraints",sidebar:"docsSidebar",previous:{title:"Temple Test",permalink:"/temple-docs/docs/guide/temple-test"},next:{title:"System Architecture",permalink:"/temple-docs/docs/arch/system"}},c=[{value:"Primitive Restrictions",id:"primitive-restrictions",children:[]},{value:"Annotations",id:"annotations",children:[{value:"Unique",id:"unique",children:[]}]}],l={rightToc:c};function p({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Sometimes you need more control over the values that are valid in your data model.\nFor these cases Temple provides a suite of Value Constraints: extra metadata you can attach to properties that allow values to be restricted in some way."),Object(a.b)("h2",{id:"primitive-restrictions"},"Primitive Restrictions"),Object(a.b)("p",null,"Many of Temple's primitive data types support optional parameters when you declare them, to give bounds on their values.\nAn example of this is when an integer is defined. We'll take the ",Object(a.b)("inlineCode",{parentName:"p"},"ExampleService")," from the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"getting-started"}),"Getting Started")," guide:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"ExampleService: service {\n  foo: string;\n  bar: int;\n}\n")),Object(a.b)("p",null,"If, for example, we wanted to constrain the ",Object(a.b)("inlineCode",{parentName:"p"},"bar")," property to be only positive numbers, we could write:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"ExampleService: service {\n  foo: string;\n  bar: int(min: 0);\n}\n")),Object(a.b)("p",null,"If we wanted to restrict it between two numbers, for example 0 and 100, we'd write:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"ExampleService: service {\n  foo: string;\n  bar: int(100, 0);\n}\n")),Object(a.b)("p",null,"Notice that here we didn't provide the argument names to the ",Object(a.b)("inlineCode",{parentName:"p"},"int")," definitions, as they're optional.\nHowever, when only a single argument is provided to the ",Object(a.b)("inlineCode",{parentName:"p"},"int")," definition, it defaults to the ",Object(a.b)("inlineCode",{parentName:"p"},"max")," argument.\nBy using the ",Object(a.b)("inlineCode",{parentName:"p"},"min:")," name, we can specify the ",Object(a.b)("inlineCode",{parentName:"p"},"min")," without the ",Object(a.b)("inlineCode",{parentName:"p"},"max"),".\nMost of the primitives in Temple support similar parameters.\nThe full list of parameters can be found in the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"reference/primitives"}),"Primitives")," section of the Templefile reference."),Object(a.b)("h2",{id:"annotations"},"Annotations"),Object(a.b)("p",null,"In addition to restricting individual values with primitive parameters, Temple supports adding service-level constraints with annotations.\nCurrently there is one supported annotation, with more being planned to be released in the future."),Object(a.b)("h3",{id:"unique"},"Unique"),Object(a.b)("p",null,"By adding a ",Object(a.b)("inlineCode",{parentName:"p"},"@unique")," annotation to a property, at most one object stored by the service may have a particular value stored for that property.\nFor example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"ExampleService: service {\n  foo: string;\n  bar: int @unique;\n}\n")),Object(a.b)("p",null,"Means that the ",Object(a.b)("inlineCode",{parentName:"p"},"bar")," property on every ",Object(a.b)("inlineCode",{parentName:"p"},"ExampleService")," object must be unique."),Object(a.b)("p",null,"We could create an ExampleService object with values ",Object(a.b)("inlineCode",{parentName:"p"},'foo = "test"')," and ",Object(a.b)("inlineCode",{parentName:"p"},"bar = 10"),", but then no other object could have the value ",Object(a.b)("inlineCode",{parentName:"p"},"bar = 10"),".\nWe can test this by running:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),'\u276f\u276f\u276f curl -X POST $KONG_ENTRY/api/example-service -d \'{"foo": "value!", "bar": 10}\'\n{"id":"e24e6d58-83e7-11ea-b435-0242ac1d0003","foo":"value!","bar":10}\n\n\u276f\u276f\u276f curl -X POST $KONG_ENTRY/api/example-service -d \'{"foo": "another value!", "bar": 10}\'\n{"error":"Duplicate ExampleService found"}\n')),Object(a.b)("p",null,"When combined with property value level constraints, one could limit the total number of ",Object(a.b)("inlineCode",{parentName:"p"},"ExampleService")," objects that could exist at any one time.\nFor example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"ExampleService: service {\n  foo: string;\n  bar: int(100, 1) @unique;\n}\n")),Object(a.b)("p",null,"As there are only 100 possible values for the ",Object(a.b)("inlineCode",{parentName:"p"},"bar")," property, and each one must be unique: there can only ever be at most 100 total ",Object(a.b)("inlineCode",{parentName:"p"},"ExampleService")," objects."))}p.isMDXComponent=!0},136:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),m=r,d=b["".concat(o,".").concat(m)]||b[m]||u[m]||i;return n?a.a.createElement(d,c({ref:t},p,{components:n})):a.a.createElement(d,c({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);