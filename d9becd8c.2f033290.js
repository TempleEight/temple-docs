(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{169:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(1),a=n(11),i=(n(0),n(176)),o={id:"value-constraints",title:"Value Constraints",sidebar_label:"Value Constraints"},c={id:"guide/value-constraints",title:"Value Constraints",description:"Sometimes you need more control over the values that are valid in your data model.",source:"@site/docs/guide/value-constraints.md",permalink:"/temple-docs/docs/guide/value-constraints",editUrl:"https://github.com/TempleEight/temple-docs/edit/master/TempleEight/docs/guide/value-constraints.md",sidebar_label:"Value Constraints",sidebar:"docsSidebar",previous:{title:"Value Annotations",permalink:"/temple-docs/docs/guide/value-annotations"},next:{title:"System Architecture",permalink:"/temple-docs/docs/arch/system"}},l=[{value:"Primitive Restrictions",id:"primitive-restrictions",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Sometimes you need more control over the values that are valid in your data model.\nFor these cases Temple provides a suite of Value Constraints: extra metadata you can attach to properties that allow values to be restricted in some way."),Object(i.b)("h2",{id:"primitive-restrictions"},"Primitive Restrictions"),Object(i.b)("p",null,"Many of Temple's primitive data types support optional parameters when you declare them, to give bounds on their values.\nAn example of this is when an integer is defined. We'll take the ",Object(i.b)("inlineCode",{parentName:"p"},"ExampleService")," from the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"getting-started"}),"Getting Started")," guide:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-templefile"}),"ExampleService: service {\n  foo: string;\n  bar: int;\n}\n")),Object(i.b)("p",null,"If, for example, we wanted to constrain the ",Object(i.b)("inlineCode",{parentName:"p"},"bar")," property to be only positive numbers, we could write:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-templefile"}),"ExampleService: service {\n  foo: string;\n  bar: int(min: 0);\n}\n")),Object(i.b)("p",null,"If we wanted to restrict it between two numbers, for example 0 and 100, we'd write:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-templefile"}),"ExampleService: service {\n  foo: string;\n  bar: int(100, 0);\n}\n")),Object(i.b)("p",null,"Notice that here we didn't provide the argument names to the ",Object(i.b)("inlineCode",{parentName:"p"},"int")," definitions, as they're optional.\nHowever, when only a single argument is provided to the ",Object(i.b)("inlineCode",{parentName:"p"},"int")," definition, it defaults to the ",Object(i.b)("inlineCode",{parentName:"p"},"max")," argument.\nBy using the ",Object(i.b)("inlineCode",{parentName:"p"},"min:")," name, we can specify the ",Object(i.b)("inlineCode",{parentName:"p"},"min")," without the ",Object(i.b)("inlineCode",{parentName:"p"},"max"),".\nMost of the primitives in Temple support similar parameters.\nThe full list of parameters can be found in the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"reference/primitives"}),"Primitives")," section of the Templefile reference."))}p.isMDXComponent=!0},176:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,d=u["".concat(o,".").concat(b)]||u[b]||m[b]||i;return n?a.a.createElement(d,c({ref:t},s,{components:n})):a.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);